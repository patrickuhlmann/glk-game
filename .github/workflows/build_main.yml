name: Build Main

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 20 1 * *'

jobs:
  build_and_test:
    name: "Build and Test"
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2.3.4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2.4.1
      with:
        node-version: 14.x

    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - uses: actions/cache@v2.1.6
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: "Install Dependencies"
      run: yarn --frozen-lockfile

    - name: "Build"
      run: yarn run build

    - name: Archive dist
      uses: actions/upload-artifact@v2
      with:
        name: dist
        path: dist

    - name: "Unit Tests"
      run: yarn run test

    - name: Archive report
      uses: actions/upload-artifact@v2
      with:
        name: unit test coverage report
        path: coverage

  sonarcloud:
    runs-on: ubuntu-latest
    needs: [build_and_test]

    steps:
    - name: "Checkout"
      uses: actions/checkout@v2.3.4
      with:
        fetch-depth: 0

    - name: Download coverage reports
      uses: actions/download-artifact@v2
      with:
        name: unit test coverage report
        path: coverage

    - name: fix code coverage paths # see https://community.sonarsource.com/t/code-coverage-doesnt-work-with-github-action/16747/5
      working-directory: ./coverage
      run: |
        sed -i 's/\/home\/runner\/work\/glk-game\/glk-game\//\/github\/workspace\//g' lcov.info
        sed -i 's/\/home\/runner\/work\/glk-game\/glk-game\//\/github\/workspace\//g' sonar-test-reporter.xml

    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  buildDockerImage:
    runs-on: ubuntu-latest
    needs: [build_and_test, sonarcloud]
    steps:
    - name: Checkout
      uses: actions/checkout@v2.3.4

    - name: Prepare
      id: prep
      run: |
        DOCKER_IMAGE=ghcr.io/${{ github.repository }}/website
        VERSION=edge
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ $GITHUB_REF == refs/heads/* ]]; then
          VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
        elif [[ $GITHUB_REF == refs/pull/* ]]; then
          VERSION=pr-${{ github.event.number }}
        fi
        TAGS="${DOCKER_IMAGE}:${VERSION}"
        if [ "${{ github.event_name }}" = "push" ]; then
          TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
        fi
        echo ::set-output name=version::${VERSION}
        echo ::set-output name=tags::${TAGS}
        echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1.6.0

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1.10.0
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT }}

    - name: Download dist
      uses: actions/download-artifact@v2
      with:
        name: dist
        path: docker/github/dist

    - name: Build container image
      uses: docker/build-push-action@v2.7.0
      with:
        context: docker/github
        file: docker/github/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.prep.outputs.tags }}
        labels: |
          org.opencontainers.image.source=${{ github.event.repository.html_url }}
          org.opencontainers.image.created=${{ steps.prep.outputs.created }}
          org.opencontainers.image.revision=${{ github.sha }}

  deploy:
    name: "Deploy to Heroku"
    needs: buildDockerImage
    runs-on: ubuntu-latest
    environment:
      name: test
      url: "https://glk-game.herokuapp.com/"
    steps:
      - uses: actions/checkout@v2.3.4

      - name: Download dist
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: docker/heroku/dist

      - uses: gonuit/heroku-docker-deploy@v1.3.3
        with:
          email: "heroku@uhlme.ch"
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: "glk-game"
          dockerfile_name: Dockerfile
          dockerfile_directory: docker/heroku
          process_type: web
